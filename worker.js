#!/usr/bin/env node

/**
 * Worker Process para processamento das filas
 * Execute este arquivo separadamente: node worker.js
 */

require('dotenv').config();
const { messageQueue, campaignQueue } = require('./services/queue');

console.log('üîß Iniciando worker de processamento de filas...');

// Configura√ß√µes do worker
const CONCURRENCY = 10; // Processos simult√¢neos
const WORKER_NAME = `worker-${process.pid}`;

// Log das configura√ß√µes
console.log(`üìä Configura√ß√µes:`);
console.log(`   - Concorr√™ncia: ${CONCURRENCY}`);
console.log(`   - Rate Limit: ${process.env.MESSAGES_PER_SECOND || 200} msg/s`);
console.log(`   - Worker ID: ${WORKER_NAME}`);
console.log('');

// Event listeners para monitoramento
messageQueue.on('ready', () => {
  console.log('‚úÖ Fila de mensagens conectada');
});

messageQueue.on('error', (error) => {
  console.error('‚ùå Erro na fila de mensagens:', error);
});

messageQueue.on('waiting', (jobId) => {
  console.log(`‚è≥ Job ${jobId} adicionado na fila`);
});

messageQueue.on('active', (job) => {
  console.log(`üöÄ Processando mensagem para: ${job.data.phoneNumber}`);
});

messageQueue.on('completed', (job, result) => {
  console.log(`‚úÖ Mensagem enviada: ${job.data.phoneNumber} (ID: ${result.messageId})`);
});

messageQueue.on('failed', (job, err) => {
  console.error(`‚ùå Falha no envio: ${job.data.phoneNumber} - ${err.message}`);
});

messageQueue.on('stalled', (job) => {
  console.log(`‚ö†Ô∏è  Job travado: ${job.id}`);
});

// Event listeners para campanha
campaignQueue.on('ready', () => {
  console.log('‚úÖ Fila de campanhas conectada');
});

campaignQueue.on('active', (job) => {
  console.log(`üéØ Processando campanha: ${job.data.campaignId}`);
});

campaignQueue.on('completed', (job) => {
  console.log(`‚úÖ Campanha processada: ${job.data.campaignId}`);
});

campaignQueue.on('failed', (job, err) => {
  console.error(`‚ùå Falha na campanha: ${job.data.campaignId} - ${err.message}`);
});

// Estat√≠sticas peri√≥dicas
setInterval(async () => {
  try {
    const messageStats = await getQueueStats(messageQueue);
    const campaignStats = await getQueueStats(campaignQueue);
    
    console.log('');
    console.log('üìä ESTAT√çSTICAS DO WORKER');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    console.log(`Mensagens - Aguardando: ${messageStats.waiting} | Ativo: ${messageStats.active} | Conclu√≠do: ${messageStats.completed} | Falhou: ${messageStats.failed}`);
    console.log(`Campanhas - Aguardando: ${campaignStats.waiting} | Ativo: ${campaignStats.active} | Conclu√≠do: ${campaignStats.completed} | Falhou: ${campaignStats.failed}`);
    console.log(`Uptime: ${formatUptime(process.uptime())}`);
    console.log(`Mem√≥ria: ${formatMemory(process.memoryUsage().rss)}`);
    console.log('');
    
  } catch (error) {
    console.error('Erro ao obter estat√≠sticas:', error);
  }
}, 30000); // A cada 30 segundos

// Fun√ß√£o para obter estat√≠sticas da fila
async function getQueueStats(queue) {
  const waiting = await queue.getWaiting();
  const active = await queue.getActive();
  const completed = await queue.getCompleted();
  const failed = await queue.getFailed();
  
  return {
    waiting: waiting.length,
    active: active.length,
    completed: completed.length,
    failed: failed.length
  };
}

// Formatar uptime
function formatUptime(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  
  return `${hours}h ${minutes}m ${secs}s`;
}

// Formatar mem√≥ria
function formatMemory(bytes) {
  return `${Math.round(bytes / 1024 / 1024)}MB`;
}

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('üõë Recebido SIGTERM, encerrando worker...');
  
  await messageQueue.close();
  await campaignQueue.close();
  
  console.log('‚úÖ Worker encerrado com sucesso');
  process.exit(0);
});

process.on('SIGINT', async () => {
  console.log('üõë Recebido SIGINT, encerrando worker...');
  
  await messageQueue.close();
  await campaignQueue.close();
  
  console.log('‚úÖ Worker encerrado com sucesso');
  process.exit(0);
});

// Tratamento de erros n√£o capturados
process.on('uncaughtException', (error) => {
  console.error('üí• Erro n√£o capturado:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üí• Promise rejeitada n√£o tratada:', reason);
  process.exit(1);
});

console.log('üöÄ Worker iniciado com sucesso!');
console.log('üí° Use Ctrl+C para parar o worker');
console.log('');

// Monitoramento de sa√∫de
setInterval(() => {
  // Health check simples
  if (process.memoryUsage().rss > 500 * 1024 * 1024) { // 500MB
    console.warn('‚ö†Ô∏è  Alto uso de mem√≥ria detectado');
  }
}, 60000); // A cada minuto